Frontend Development
------------------------
website: Collection of webpages.
webpage: it is a single document from a website with navigatable links.

to create webpage---> HTML, CSS, JS.

HTML--> Hyper Text Markup Language.
adds content and structure...

Hyper Text---> Link--> the text that navigates you to another destiny/.
Markup---> symbol to format and structure the contents.

Tags---> <>-->opening   </>--> closing tag.
Void---> opening tag alone (<>)
No Void--> opening and closing tag.(<></>).

path:
-----
parent---> ../
child----> /
sibiling-> ./

Commenting
--------------

<!--    comment  --> ---> in VS code ctrl+/

Attribute
-----------
Additional Information about the tag.
id, class... common for all the HTML tags
< name="value"></>

extension---> .html --> the first html file (index.html)

Boiler Plate:
----------------
Basic Strycture--> html, head, body
<!DOCTYPE html>---> refers the version of HTML
html---> head, body
head---> metadata of the webpage..(metadata--> the details about the webpage)
body---> the contents of that webpage


Basic Tags 
----------

Heading Tags---> h1,h2....h6 (to add titles in webpage).
paragraph----> p ---> format the contents by seperating it.


Unordered List (the list will not have numbering. it will have a symbol as a prefix instead)
---------------
ul, li.

Ordered List (the list will have numbering.)
---------------
ol, li.

Anchor tag 
-----------
a--->To create a link using it.
href="link", target="_blank".

Div tag--->  Divide the contents using a seperate box.

br--> break (void tag)
hr---> void tag (horizontal line)

img---> add image..(void).
src---> link to the image.
alt--> alternate keyword.

Text Formatting Tags.
---------------------
b--->bold tag
sup---> super script
ins---> underline
del--> deleted text
mark--> highlight

Entities
--------
Used to represent symbols and characters.
&---;

Tables
------

table---> parent tag for the table.
table---> thead, tbady

tr---> Table Row.
th---> Table head element
td---> Table Data.

px--> 0.27mm.

Forms.
------
form--> parent tag.
input tag---> void tag. used to create input fields.
name---> defines the input field.
required.
type---> text, number, password, email, date, radio


description---> placeholder, label tag


CSS
----
Cascading Style Sheet.
Used to style the HTML Contents.

commenting--->/* Tag name selector */

cascade--->

Types of way to insert styling:
-------------------------------
Internal ---> <style> inside head
External ---> different file dedicated for styling. <link> inside head
Inline---> style attribute in the corresponding tag itself

Syntax of CSS.
---------------
selector{
    property1: value1;
    property2: value2;
    .
    .
    .
}

Selectors:
-----------
Tag name selector---> tag's name as a selector.(it will select all the tags with the given tag name).

class name selector---> class attribue. single tag can hold multiple different class names. the class name can be repeated amoung different tag. to select it, you should use "." as a prefix.

id name selector---> id attribute. single tag can hold only one id name. the Id name cannot be repeated. # as a prefix.

Universal Selector---> It will select all the tags.(*)

inline > id name > class > tag > *.

Special Types of Selector
--------------------------
Descendant Secector ---> This selects the descendant tags. (tag1 tag2)
Direct Descendant(child selector) ---> this selects only the child. (tag1>tag2)
grouping---> tag1, tag.(,)

Pseudo-selector
------------------
used to select an element in particular state or  select a particularpart of an element.

Classes (:) (select an element in particular state)
------------
hover---> when we hover over the element.
focus---> input tag focusing.
first-child, last-chid, nth-child(number) ---> selects a child in particular position.

Elements (::) (selects a particular part of an element)
-----------
first-letter--> selects only the first letter
first-line--> selects only the first line.

before--> we can add and style some contents before an element.

after--> we can add and style some contents after an element.

Properties:
-----------
Color property:
----------------
background-color: value; 
1) keyword.
2) RGB---> Red, Green, Blue--> rgb(rat1, rat2, rat3). (0-255).
3) hex code---> #xxxxxx.

Text properties.
-------------------
color---> assign color to text.
font-size---> defines size of text.(keyword)(using numerics with unit. ex: px, pt, cm, in.....).
font-weight---> defines thickness of text.(100-900, keyword).
font-style---> styling to text.
font-family---> defines font family of the selected text.(default values, we can choose from browser too.)
text-align---> start, end, center, justify.


Box Modelling
-----------------
Every element in a webpage will be considered as a box.

used to define the content's size.
1) width---> Horizontal Distance 
2) height--> Veritical Distance

3) padding--->used to add space between the content and the border

4) Boder---> space that wraps around the whole element.
5) margin-->Space between elements and the screen border. (auto---> that content will have enough margin on it's both sides to make it center on screen)
6) Border Radius.
7) Box-sizing ---> content-box(total width=content's width+padding+border). border-box(tatal width= width property value).

Units in CSS
-------------
Absolute Units
---------------
Fixed Units--> Do not change due to any factor.
px--> Pixel(most commonly used). 0.2658mm.
pt--> Point. 0.35mm
cm, in, mm....

Relative Units
--------------
Flexible Units --> Adapt based on other elaments or viewport.

em---> used to maintain the fontsize. this is relative to the parent element. 1em--> 100% of parent's font size. 2em 200%. 1.5em---> 150%

rem---> Root em ---> relative to root element(html) (16px). 1rem--> 100% of html's font size. 2rem---> 200%.

Percentage---> width, height, padding, margin--> relative to the parent. (content width and height). (padding, margin--> parent's width value).

vw---> viewport width----> relative to viewport's width. 100vw---> 100% of vw. 120vw---> 120% of vw.. 80vw-->80% of vw.

vh---> Viewport height---> relative to viewport's height


Positioning
------------
Document Flow:(normail flow)
--------------
elements will be arranged on to and left most corner.


CSS position properties control how an element is placed in the document. It has five main values.

top, bottom, left and right.

Static
-------
position: static;
>> that element will not be removed from document flow.
>> top,bottom,left,right--> these properties will not work.

Relative
--------- (relative to it's original position)
position: relative;
>> that element will not be removed from document flow.
>> top,bottom,left,right--> these properties will work.

ex: top:20px---> move towards bottom for 20px, bottom:20px-->top for 20px.

Absolute 
--------- (relative to it's NPA(Nearest Positioned Ancestor))
position: absolute;

NPA--> The nearest Ancestor with relative, fixed or absolute positioning property.


>> that element will be removed from document flow.
>> top,bottom,left,right--> these properties will work.

ex: top: 10px--> the gap between the NPA's top and this element's top will be 10px, 

Fixed
------(Positioned Relative to the viewport)
>> that element will be removed from document flow.
>> Stays fixed at the place when the page scrolls.

Sticky
-------
Hybrid of Relative and Fixed.

>>Acts like relative until a scroll threshold is met, then it becomes fixed.


Z-index 
---------
>> works only in positioned elements. (relative, absolute,fixed and sticky).

defaultly--->0(-999 to 999)
Higher z-index =appears on top.
Lower z-index= appears underneath


Transform
---------
the transform property in CSS used to visually manipulate elements on a webpage. it allows you to move, rotate, scale... withiout affecting the document flow.

transform: transform-function(value);

Translate:
----------
%--> relative to won width, height.
X--> + --> right, - --> left
Y--> + --> bottom, - --> top
Moves an element from it's current position.
translateX(val)
translateY(val)
translate(val1,val2)

scale 
------
resizes the element.
scaleX(val)
scaleY(val)
scale(val)

1---> 100% of it's original size 
2---> 200% of it's original size 

rotate 
------
rotating the element.
rotate(val)
0-360
+---> clockwise
- anticlockwise.

ratateX(val)---> rotation in 3D.
ratateY(val)---> rotation in 3D.

skew
-----
tilts the element.
skewX(val)
skewY(val)
skew(val1,val2)

combining:
----------
transform: translate(30px,50px) scale(2) rotate(30deg);

Display Property 
-----------------

Block Level Elements.
------------------------
>>It takes up full available width, regardless of it's content.
>>It always start on a new line.
>>Width and Height can be assigned.

Ex: div, p, h1-h6, ul, li.....

Inline Elements 
----------------
>>It won't take full width, takes only content width.
>>It will not start on a new line.
>>Width and height cannot be assigned.

Ex: a, span...

Inline block Elements
----------------------
It is Hybrid of Inline and Block level 

>>It won't take full width, takes only content width.
>>It will not start on a new line.
>>Width and Height can be assigned.

ex:img...


Using Display property we can change the display characteristics of any element.

display: block;
display: inline;
display: inline-block;
display: none; ---> the element will be removed from document.